#!/usr/bin/perl

# ==========================================================================
#
# Save snapshots of motion over a period of time during daylight hours.
#
# Copyright 2019, Neill Bell
#
# ==========================================================================

use strict;
use warnings;
use DateTime::Event::Sunrise;
use DateTime::Format::Strptime;
use DateTime::Format::Natural;
use DateTime::TimeZone;
use Getopt::Long;

my $latitude = $ENV{SUNRISE_LAT};
my $longitude = $ENV{SUNRISE_LONG};
my $timezone = $ENV{SUNRISE_TZ} || "local";
my $startdate;
my $stopdate;
my @monitor;
  
GetOptions("lat=f" => \$latitude,
           "long=f" => \$longitude,
           "timezone=s" => \$timezone,
           "startdate=s" => \$startdate,
           "stopdate=s" => \$stopdate,
           "monitor=s" => \@monitor,
           "help" => sub { usage() }
  ) or usage();

die "must set latitude and longitude\n" if !$latitude || !$longitude;
die "must set startdate and stopdate\n" if !$startdate || !$stopdate;

my $sundt = DateTime::Event::Sunrise ->new(latitude  => $latitude,
                                           longitude => $longitude,
                                           precise   => '1');

my $parser = DateTime::Format::Natural->new(time_zone => $timezone);

my $startdt = $parser->parse_datetime($startdate);
my $stopdt = $parser->parse_datetime($stopdate);

while (DateTime->compare($startdt, $stopdt) <= 0)
{
  my $sunrise = $sundt->sunrise_datetime($startdt);
  my $sunset = $sundt->sunset_datetime($startdt);

  my $cmd = "zmgetimg --from $sunrise --to $sunset --save";

  if (@monitor)
  {
    foreach my $monitor (@monitor)
    {
      $cmd .= " --monitor $monitor";
    }
  }

  print "cmd: $cmd\n";
  system($cmd);
  
  $startdt->add(days => 1); 
}
